# Generated by Django 4.2.23 on 2025-09-03 15:00

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('wagtail_subscriptions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('open', 'Open'), ('paid', 'Paid'), ('void', 'Void'), ('uncollectible', 'Uncollectible')], default='draft', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('issue_date', models.DateTimeField()),
                ('due_date', models.DateTimeField()),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=255, verbose_name='External ID')),
                ('payment_processor', models.CharField(default='stripe', max_length=50)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='invoices/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('canceled', 'Canceled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('external_id', models.CharField(max_length=255, verbose_name='External ID')),
                ('payment_processor', models.CharField(default='stripe', max_length=50)),
                ('failure_code', models.CharField(blank=True, max_length=100)),
                ('failure_message', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank_account', 'Bank Account'), ('paypal', 'PayPal'), ('other', 'Other')], default='card', max_length=20)),
                ('last_four', models.CharField(blank=True, max_length=4)),
                ('brand', models.CharField(blank=True, max_length=20)),
                ('exp_month', models.PositiveIntegerField(blank=True, null=True)),
                ('exp_year', models.PositiveIntegerField(blank=True, null=True)),
                ('external_id', models.CharField(max_length=255, verbose_name='External ID')),
                ('payment_processor', models.CharField(default='stripe', max_length=50)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Group Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Subscription Group',
                'verbose_name_plural': 'Subscription Groups',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Subscription Permission',
                'verbose_name_plural': 'Subscription Permissions',
            },
        ),
        migrations.CreateModel(
            name='UsageRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Usage Record',
                'verbose_name_plural': 'Usage Records',
            },
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_processor', models.CharField(max_length=50)),
                ('event_type', models.CharField(max_length=100)),
                ('external_id', models.CharField(max_length=255, verbose_name='External Event ID')),
                ('data', models.JSONField()),
                ('processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Webhook Event',
                'verbose_name_plural': 'Webhook Events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.RenameIndex(
            model_name='subscription',
            new_name='wagtail_sub_user_id_d55194_idx',
            old_name='wagtail_sub_user_id_b8e5c7_idx',
        ),
        migrations.RenameIndex(
            model_name='subscription',
            new_name='wagtail_sub_externa_101b15_idx',
            old_name='wagtail_sub_externa_4b8c8a_idx',
        ),
        migrations.AlterUniqueTogether(
            name='webhookevent',
            unique_together={('payment_processor', 'external_id')},
        ),
        migrations.AddField(
            model_name='usagerecord',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='wagtail_subscriptions.feature'),
        ),
        migrations.AddField(
            model_name='usagerecord',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='wagtail_subscriptions.subscription'),
        ),
        migrations.AddField(
            model_name='subscriptionpermission',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='wagtail_subscriptions.feature'),
        ),
        migrations.AddField(
            model_name='subscriptionpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='subscriptiongroup',
            name='permissions',
            field=models.ManyToManyField(blank=True, related_name='subscription_groups', to='auth.permission'),
        ),
        migrations.AddField(
            model_name='subscriptiongroup',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='wagtail_subscriptions.subscriptionplan'),
        ),
        migrations.AddField(
            model_name='paymentmethod',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='wagtail_subscriptions.customer'),
        ),
        migrations.AddField(
            model_name='payment',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='wagtail_subscriptions.customer'),
        ),
        migrations.AddField(
            model_name='payment',
            name='invoice',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='wagtail_subscriptions.invoice'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtail_subscriptions.paymentmethod'),
        ),
        migrations.AddField(
            model_name='payment',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='wagtail_subscriptions.subscription'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='wagtail_subscriptions.customer'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='wagtail_subscriptions.subscription'),
        ),
        migrations.AddIndex(
            model_name='usagerecord',
            index=models.Index(fields=['subscription', 'feature'], name='wagtail_sub_subscri_062dc5_idx'),
        ),
        migrations.AddIndex(
            model_name='usagerecord',
            index=models.Index(fields=['period_start', 'period_end'], name='wagtail_sub_period__28ea1a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usagerecord',
            unique_together={('subscription', 'feature', 'period_start')},
        ),
        migrations.AlterUniqueTogether(
            name='subscriptionpermission',
            unique_together={('feature', 'permission')},
        ),
        migrations.AlterUniqueTogether(
            name='subscriptiongroup',
            unique_together={('plan', 'name')},
        ),
    ]
